#!/bin/bash

# üåô Moonlight Logger - Stress Test Script
# Executa testes de carga para validar robustez e performance

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configura√ß√µes padr√£o
DEFAULT_TOTAL_LOGS=10000
DEFAULT_BATCH_SIZE=100
DEFAULT_DELAY=100
DEFAULT_PATTERN="steady"
DEFAULT_MALFORMED="true"

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo -e "${CYAN}üåô Moonlight Logger - Stress Test${NC}"
    echo ""
    echo "Uso: $0 [OP√á√ïES]"
    echo ""
    echo "Op√ß√µes:"
    echo "  -t, --total LOGS     Total de logs para gerar (padr√£o: $DEFAULT_TOTAL_LOGS)"
    echo "  -b, --batch SIZE     Tamanho do batch (padr√£o: $DEFAULT_BATCH_SIZE)"
    echo "  -d, --delay MS       Delay entre batches em ms (padr√£o: $DEFAULT_DELAY)"
    echo "  -p, --pattern TYPE   Padr√£o de tr√°fego (padr√£o: $DEFAULT_PATTERN)"
    echo "  -m, --malformed      Incluir logs malformados (padr√£o: $DEFAULT_MALFORMED)"
    echo "  -h, --help           Mostra esta ajuda"
    echo ""
    echo "Padr√µes de Tr√°fego:"
    echo "  steady               Tr√°fego constante e previs√≠vel"
    echo "  spike                Picos de tr√°fego seguidos de redu√ß√µes"
    echo "  wave                 Ondas de tr√°fego com intensidade vari√°vel"
    echo "  chaos                Tr√°fego ca√≥tico e imprevis√≠vel"
    echo ""
    echo "Exemplos:"
    echo "  $0                                    # Teste padr√£o"
    echo "  $0 -t 50000 -b 500                   # 50k logs, batch de 500"
    echo "  $0 -p spike -t 20000                 # Picos de tr√°fego, 20k logs"
    echo "  $0 -p chaos -t 100000 -b 1000       # Caos total, 100k logs"
    echo ""
}

# Fun√ß√£o para validar argumentos
validate_args() {
    if [[ $TOTAL_LOGS -lt 100 ]]; then
        echo -e "${RED}‚ùå Erro: Total de logs deve ser >= 100${NC}"
        exit 1
    fi
    
    if [[ $BATCH_SIZE -lt 10 ]]; then
        echo -e "${RED}‚ùå Erro: Tamanho do batch deve ser >= 10${NC}"
        exit 1
    fi
    
    if [[ $DELAY -lt 10 ]]; then
        echo -e "${RED}‚ùå Erro: Delay deve ser >= 10ms${NC}"
        exit 1
    fi
    
    case $PATTERN in
        "steady"|"spike"|"wave"|"chaos")
            ;;
        *)
            echo -e "${RED}‚ùå Erro: Padr√£o inv√°lido: $PATTERN${NC}"
            echo "Padr√µes v√°lidos: steady, spike, wave, chaos"
            exit 1
            ;;
    esac
}

# Fun√ß√£o para mostrar configura√ß√£o
show_config() {
    echo -e "${BLUE}üìä Configura√ß√£o do Stress Test:${NC}"
    echo "  Total de Logs: ${GREEN}$TOTAL_LOGS${NC}"
    echo "  Tamanho do Batch: ${GREEN}$BATCH_SIZE${NC}"
    echo "  Delay entre Batches: ${GREEN}${DELAY}ms${NC}"
    echo "  Padr√£o de Tr√°fego: ${GREEN}$PATTERN${NC}"
    echo "  Logs Malformados: ${GREEN}$MALFORMED${NC}"
    echo ""
}

# Fun√ß√£o para executar stress test
run_stress_test() {
    echo -e "${YELLOW}üöÄ Iniciando Stress Test...${NC}"
    echo ""
    
    # Verifica se o backend est√° rodando
    if ! curl -s http://localhost:4000/health > /dev/null; then
        echo -e "${RED}‚ùå Erro: Backend n√£o est√° rodando em http://localhost:4000${NC}"
        echo "Execute o backend primeiro: npm run dev"
        exit 1
    fi
    
    # Executa o stress test
    cd backend
    npx ts-node src/logger/stressTest.ts \
        --total $TOTAL_LOGS \
        --batch $BATCH_SIZE \
        --delay $DELAY \
        --pattern $PATTERN \
        --malformed $MALFORMED
    
    echo ""
    echo -e "${GREEN}‚úÖ Stress Test Conclu√≠do!${NC}"
}

# Fun√ß√£o para executar teste r√°pido
run_quick_test() {
    echo -e "${CYAN}‚ö° Executando Teste R√°pido...${NC}"
    echo ""
    
    run_stress_test
}

# Fun√ß√£o para executar teste de produ√ß√£o
run_production_test() {
    echo -e "${PURPLE}üè≠ Executando Teste de Produ√ß√£o...${NC}"
    echo ""
    
    # Configura√ß√µes para produ√ß√£o
    TOTAL_LOGS=100000
    BATCH_SIZE=1000
    DELAY=50
    PATTERN="wave"
    MALFORMED="true"
    
    show_config
    run_stress_test
}

# Fun√ß√£o para executar teste de caos
run_chaos_test() {
    echo -e "${RED}üí• Executando Teste de Caos...${NC}"
    echo ""
    
    # Configura√ß√µes para caos
    TOTAL_LOGS=50000
    BATCH_SIZE=500
    DELAY=25
    PATTERN="chaos"
    MALFORMED="true"
    
    show_config
    run_stress_test
}

# Fun√ß√£o para executar teste de picos
run_spike_test() {
    echo -e "${YELLOW}üìà Executando Teste de Picos...${NC}"
    echo ""
    
    # Configura√ß√µes para picos
    TOTAL_LOGS=30000
    BATCH_SIZE=200
    DELAY=100
    PATTERN="spike"
    MALFORMED="false"
    
    show_config
    run_stress_test
}

# Fun√ß√£o para executar suite completa de testes
run_full_suite() {
    echo -e "${BLUE}üß™ Executando Suite Completa de Testes...${NC}"
    echo ""
    
    echo -e "${CYAN}1Ô∏è‚É£ Teste R√°pido (10k logs)${NC}"
    TOTAL_LOGS=10000
    BATCH_SIZE=100
    DELAY=100
    PATTERN="steady"
    MALFORMED="false"
    run_stress_test
    
    echo ""
    echo -e "${YELLOW}2Ô∏è‚É£ Teste de Picos (30k logs)${NC}"
    TOTAL_LOGS=30000
    BATCH_SIZE=200
    DELAY=100
    PATTERN="spike"
    MALFORMED="false"
    run_stress_test
    
    echo ""
    echo -e "${PURPLE}3Ô∏è‚É£ Teste de Ondas (50k logs)${NC}"
    TOTAL_LOGS=50000
    BATCH_SIZE=500
    DELAY=50
    PATTERN="wave"
    MALFORMED="true"
    run_stress_test
    
    echo ""
    echo -e "${RED}4Ô∏è‚É£ Teste de Caos (100k logs)${NC}"
    TOTAL_LOGS=100000
    BATCH_SIZE=1000
    DELAY=25
    PATTERN="chaos"
    MALFORMED="true"
    run_stress_test
    
    echo ""
    echo -e "${GREEN}üéâ Suite Completa Conclu√≠da!${NC}"
}

# Parse argumentos da linha de comando
TOTAL_LOGS=$DEFAULT_TOTAL_LOGS
BATCH_SIZE=$DEFAULT_BATCH_SIZE
DELAY=$DEFAULT_DELAY
PATTERN=$DEFAULT_PATTERN
MALFORMED=$DEFAULT_MALFORMED

while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--total)
            TOTAL_LOGS="$2"
            shift 2
            ;;
        -b|--batch)
            BATCH_SIZE="$2"
            shift 2
            ;;
        -d|--delay)
            DELAY="$2"
            shift 2
            ;;
        -p|--pattern)
            PATTERN="$2"
            shift 2
            ;;
        -m|--malformed)
            MALFORMED="$2"
            shift 2
            ;;
        --quick)
            run_quick_test
            exit 0
            ;;
        --production)
            run_production_test
            exit 0
            ;;
        --chaos)
            run_chaos_test
            exit 0
            ;;
        --spike)
            run_spike_test
            exit 0
            ;;
        --full-suite)
            run_full_suite
            exit 0
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o desconhecida: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Valida argumentos
validate_args

# Mostra configura√ß√£o
show_config

# Executa stress test
run_stress_test
